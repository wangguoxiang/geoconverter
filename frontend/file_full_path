import { render, screen, fireEvent } from '@testing-library/react';
import FileDownload from './FileDownload';

describe('FileDownload Component', () => {
    it('should render the Download CSV button', () => {
        render(<FileDownload fileId="testFileId" disabled={false} />);
        const button = screen.getByText(/Download CSV/i);
        expect(button).toBeInTheDocument();
    });

    it('should disable the Download CSV button when disabled prop is true', () => {
        render(<FileDownload fileId="testFileId" disabled={true} />);
        const button = screen.getByText(/Download CSV/i);
        expect(button).toBeDisabled();
    });

    it('should enable the Download CSV button when disabled prop is false', () => {
        render(<FileDownload fileId="testFileId" disabled={false} />);
        const button = screen.getByText(/Download CSV/i);
        expect(button).not.toBeDisabled();
    });

    it('should call handleDownload when the button is clicked and not disabled', async () => {
        const mockDownloadFile = jest.fn().mockResolvedValue({ data: new Blob() });
        jest.mock('../api', () => ({
            downloadFile: mockDownloadFile,
        }));

        render(<FileDownload fileId="testFileId" disabled={false} />);
        const button = screen.getByText(/Download CSV/i);
        fireEvent.click(button);

        expect(mockDownloadFile).toHaveBeenCalledWith('testFileId');
    });
});