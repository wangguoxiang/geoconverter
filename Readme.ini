```markdown
# 经纬度转地理位置服务需求文档

## 1. 项目概述
开发一个支持CSV文件批量经纬度转地理位置的服务系统，包含以下核心功能：
- 前端上传CSV文件（含经纬度字段）
- 后端调用第三方API转换地理位置
- 前端下载转换后的CSV文件

## 2. 技术栈
| 模块   | 技术栈                 |
|--------|-----------------------|
| 前端   | React 18 + TypeScript |
| 后端   | Golang 1.20+          |
| 通信   | RESTful API           |

## 3. 前端需求
### 3.1 页面组件
```tsx
interface GeoConverterPage {
  // 文件上传区域
  uploadArea: React.FC<{
    onUpload: (file: File) => void
  }>;
  
  // 状态显示
  statusPanel: React.FC<{
    processing: boolean
    progress: number // 0-100
    downloadLink?: string
  }>;
}
```

### 3.2 功能实现
1. **CSV文件上传**
   - 使用react-dropzone实现拖拽上传
   - 限制文件类型为.csv
   - 最大文件尺寸：10MB

2. **状态轮询机制**
   ```typescript
   const pollConversionStatus = async (taskId: string) => {
     const interval = setInterval(async () => {
       const res = await fetch(`/api/status/${taskId}`);
       if (res.status === 200) {
         clearInterval(interval);
         updateDownloadLink();
       }
     }, 3000);
   }
   ```

## 4. 后端需求
### 4.1 API接口设计
| 端点                   | 方法 | 说明                          |
|------------------------|------|-------------------------------|
| /api/upload            | POST | 接收CSV文件                   |
| /api/status/{taskId}   | GET  | 获取转换任务状态              |
| /api/download/{filename} | GET | 下载转换后的文件              |

### 4.2 CSV处理流程
```go
func ProcessCSV(file *multipart.FileHeader) error {
  // 1. 解析CSV
  records := csvutil.Parse(file)
  
  // 2. 并发处理坐标转换（限制10并发）
  sem := make(chan struct{}, 10)
  for _, record := range records {
    go func(r Record) {
      sem <- struct{}{}
      defer func() { <-sem }()
      
      // 调用第三方API
      resp, err := http.Get(fmt.Sprintf(
        "https://geo.util.linketech.cn/api/tianditu/reverse?lat=%s&lon=%s",
        r.Latitude, r.Longitude
      ))
      
      // 处理响应...
    }(record)
  }
}
```

### 4.3 第三方API调用规范
```go
type GeoResponse struct {
  Code    int    `json:"code"`
  Message string `json:"message"`
  Result  struct {
    FormattedAddress string `json:"formatted_address"`
  } `json:"result"`
}
```

## 5. 数据处理规范
### 5.1 CSV字段要求
| 字段名       | 类型     | 必填 |
|--------------|----------|------|
| latitude     | float64  | 是   |
| longitude    | float64  | 是   |
| address      | string   | 否   |

### 5.2 转换规则
1. 保留原始CSV所有字段
2. 新增address字段存储转换结果
3. API调用失败时记录错误信息

## 6. 非功能性需求
1. **性能指标**
   - 单文件处理时间 < 文件行数 * 300ms
   - 支持并发处理5个文件

2. **错误处理**
   - 记录API调用失败明细
   - 前端显示失败记录数量

3. **安全要求**
   - 文件服务需验证文件所有权
   - 设置CORS白名单

## 7. 部署要求
```bash
# 前端部署
cd frontend && npm run build

# 后端部署
go build -o geo-converter
./geo-converter -port=8080
```

## 8. 测试用例
```csv
# test_case.csv
latitude,longitude
39.90469,116.40717
31.23039,121.47370

# 预期结果
address字段包含"北京市"和"上海市"信息
```

文档已保存至：~/Desktop/Geo-Service-Requirements.md
``` 

该文档包含以下关键设计决策：
1. 采用轮询机制处理异步转换状态
2. 后端使用并发控制（10并发）提升处理效率
3. 保持原始CSV结构并追加新字段
4. 严格的错误日志记录机制
5. 前端使用react-dropzone优化上传体验

可根据实际项目需求调整：
- 并发控制参数
- 文件大小限制
- 错误重试策略
- 第三方API调用频率限制